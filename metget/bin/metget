#!/usr/bin/env python3
# MIT License
#
# Copyright (c) 2020 ADCIRC Development Group
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

def valid_date(s):
    """
    Checks if a date is valid when parsing arguments from the command line
    :param s: date string
    :return: datetime object
    """
    from datetime import datetime
    import argparse
    try:
        return datetime.strptime(s, "%Y-%m-%d")
    except ValueError:
        msg = "Not a valid date: '{0}'.".format(s)
        raise argparse.ArgumentTypeError(msg)


def metget_downloader():
    """
    Main function to begin downloading and writing to the database

    Begins by parsing the command line options which receives the date and time to begin/end and
    the output folder location that the database will be built
    """
    from metget.gfsdownloader import Gfsdownloader
    from metget.namdownloader import Namdownloader
    from metget.hwrfdownloader import Hwrfdownloader
    from metget.ncepdownloader import Ncepdownloader
    from metget.metdb import Metdb
    import argparse
    parser = argparse.ArgumentParser(description="Meteorological data downloader")

    # Optional arguments to select the types of data to be consuming
    parser.add_argument("-g", "--gfs", action='store_true', help="Gather GFS data")
    parser.add_argument("-n", "--nam", action='store_true', help="Gather NAM data")
    parser.add_argument("-w", "--hwrf", action='store_true', help="Gather HWRF data")
    parser.add_argument("-c", "--ncep", action='store_true', help="Gather GFS-NCEP data")
    parser.add_argument("-r", "--rebuild", action='store_true', help="Rebuild the database file")
    parser.add_argument("-s", "--start", metavar="d", type=valid_date,
                        help="Start date for download (YYYY-MM-DD)")
    parser.add_argument("-e", "--end", metavar="d", type=valid_date,
                        help="End date for download (YYYY-MM-DD)")
    parser.add_argument("-l", "--location", metavar="f", type=str,
                        help="Folder location for building the database")

    args = parser.parse_args()

    if args.rebuild:
        rebuild_database()
        return 0

    if not args.location:
        print("Error: Value for database location (--location) not set")
        exit(1)

    if not args.start:
        print("Error: Value for start date not set (--start)")
        exit(1)

    if not args.end:
        print("Error: Value for end date not set (--end)")
        exit(1)

    dbloc = args.location
    start = args.start
    end = args.end

    datagather = []
    if args.gfs:
        datagather.append(Gfsdownloader(dbloc, start, end))
    if args.nam:
        datagather.append(Namdownloader(dbloc, start, end))
    if args.hwrf:
        datagather.append(Hwrfdownloader(dbloc, start, end))
    if args.ncep:
        datagather.append(Ncepdownloader(dbloc, start, end))

    # Initialize the database
    Metdb(dbloc)

    # Download the data for the selected data types
    for datatype in datagather:
        print("Begin downloading "+datatype.metstring())
        datatype.download()

    return 0


def rebuild_database():
    """
    Rebuilds the database if there is a possible corruption using
    only the files that currently exist in the folder structure
    :return:
    """
    return


if __name__ == "__main__":
    exit(metget_downloader())
